#!/bin/bash

# =============================================================================
# Script de Inicializa√ß√£o do Projeto Cryptocurrency ETL
# =============================================================================
# Este script automatiza a configura√ß√£o e inicializa√ß√£o completa do projeto
# para que qualquer pessoa possa clonar e executar facilmente.
# =============================================================================

set -e  # Para o script se houver erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para gerar chave Fernet
generate_fernet_key() {
    python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
}

# Fun√ß√£o para gerar chave secreta
generate_secret_key() {
    openssl rand -hex 32
}

print_info "=============================================================================="
print_info "           CRYPTOCURRENCY ETL - SCRIPT DE INICIALIZA√á√ÉO"
print_info "=============================================================================="
echo

# 1. Verificar depend√™ncias
print_info "Verificando depend√™ncias do sistema..."

if ! command_exists docker; then
    print_error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    print_info "Visite: https://docs.docker.com/get-docker/"
    exit 1
fi

if ! command_exists docker-compose; then
    print_error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
    print_info "Visite: https://docs.docker.com/compose/install/"
    exit 1
fi

print_success "Docker e Docker Compose est√£o instalados."

# 2. Verificar se o Docker est√° rodando
print_info "Verificando se o Docker est√° rodando..."
if ! docker info >/dev/null 2>&1; then
    print_error "Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
    exit 1
fi
print_success "Docker est√° rodando."

# 3. Configurar arquivo .env
print_info "Configurando arquivo de ambiente..."

if [ ! -f ".env" ]; then
    print_info "Arquivo .env n√£o encontrado. Criando a partir do template..."
    
    if [ ! -f "env_example.txt" ]; then
        print_error "Arquivo env_example.txt n√£o encontrado!"
        exit 1
    fi
    
    cp env_example.txt .env
    
    # Gerar chaves automaticamente
    print_info "Gerando chaves de seguran√ßa..."
    
    # Verificar se Python est√° dispon√≠vel para gerar Fernet key
    if command_exists python3; then
        if python3 -c "import cryptography" 2>/dev/null; then
            FERNET_KEY=$(generate_fernet_key)
            sed -i "s/your_fernet_key_here/$FERNET_KEY/g" .env
            print_success "Chave Fernet gerada automaticamente."
        else
            print_warning "Biblioteca cryptography n√£o encontrada. Usando chave padr√£o."
            sed -i "s/your_fernet_key_here/dGhpcyBpcyBhIHNhbXBsZSBmZXJuZXQga2V5IGZvciBkZW1vIHB1cnBvc2Vz/g" .env
        fi
    else
        print_warning "Python3 n√£o encontrado. Usando chave Fernet padr√£o."
        sed -i "s/your_fernet_key_here/dGhpcyBpcyBhIHNhbXBsZSBmZXJuZXQga2V5IGZvciBkZW1vIHB1cnBvc2Vz/g" .env
    fi
    
    # Gerar secret key
    if command_exists openssl; then
        SECRET_KEY=$(generate_secret_key)
        sed -i "s/your_secret_key_here/$SECRET_KEY/g" .env
        print_success "Chave secreta gerada automaticamente."
    else
        print_warning "OpenSSL n√£o encontrado. Usando chave secreta padr√£o."
        sed -i "s/your_secret_key_here/thisisasamplesecretkeyfordemo12345678901234567890/g" .env
    fi
    
    # Configurar senha padr√£o do PostgreSQL
    sed -i "s/your_password/postgres123/g" .env
    
    print_success "Arquivo .env criado e configurado!"
else
    print_success "Arquivo .env j√° existe."
fi

# 4. Limpar containers e volumes antigos (opcional)
read -p "Deseja limpar containers e volumes antigos? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_info "Limpando containers e volumes antigos..."
    docker-compose down -v --remove-orphans 2>/dev/null || true
    docker system prune -f >/dev/null 2>&1 || true
    print_success "Limpeza conclu√≠da."
fi

# 5. Construir e iniciar os servi√ßos
print_info "Construindo e iniciando os servi√ßos..."
print_info "Isso pode levar alguns minutos na primeira execu√ß√£o..."

# Construir as imagens
docker-compose build

# Iniciar PostgreSQL primeiro
print_info "Iniciando PostgreSQL..."
docker-compose up -d postgres

# Aguardar PostgreSQL ficar pronto
print_info "Aguardando PostgreSQL ficar pronto..."
sleep 10

# Verificar se PostgreSQL est√° pronto
max_attempts=30
attempt=1
while [ $attempt -le $max_attempts ]; do
    if docker-compose exec -T postgres pg_isready -U postgres >/dev/null 2>&1; then
        print_success "PostgreSQL est√° pronto!"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        print_error "PostgreSQL n√£o ficou pronto ap√≥s $max_attempts tentativas."
        print_error "Verifique os logs: docker-compose logs postgres"
        exit 1
    fi
    
    print_info "Tentativa $attempt/$max_attempts - Aguardando PostgreSQL..."
    sleep 5
    ((attempt++))
done

# Inicializar Airflow
print_info "Inicializando Airflow..."
docker-compose up -d airflow-init

# Aguardar inicializa√ß√£o do Airflow
print_info "Aguardando inicializa√ß√£o do Airflow..."
sleep 15

# Iniciar todos os servi√ßos
print_info "Iniciando todos os servi√ßos..."
docker-compose up -d

# Aguardar todos os servi√ßos ficarem prontos
print_info "Aguardando todos os servi√ßos ficarem prontos..."
sleep 20

# 6. Verificar status dos servi√ßos
print_info "Verificando status dos servi√ßos..."

# Verificar PostgreSQL
if docker-compose exec -T postgres pg_isready -U postgres >/dev/null 2>&1; then
    print_success "‚úì PostgreSQL est√° funcionando"
else
    print_error "‚úó PostgreSQL n√£o est√° respondendo"
fi

# Verificar Airflow Webserver
if curl -f http://localhost:8080/health >/dev/null 2>&1; then
    print_success "‚úì Airflow Webserver est√° funcionando"
else
    print_warning "‚ö† Airflow Webserver ainda est√° inicializando (pode levar alguns minutos)"
fi

# 7. Mostrar informa√ß√µes de acesso
echo
print_info "=============================================================================="
print_success "                    PROJETO INICIALIZADO COM SUCESSO!"
print_info "=============================================================================="
echo
print_info "üîó ACESSOS:"
echo "   ‚Ä¢ Airflow Web UI: http://localhost:8080"
echo "     Usu√°rio: airflow"
echo "     Senha: airflow"
echo
echo "   ‚Ä¢ PostgreSQL: localhost:5432"
echo "     Database: cryptocurrency_db"
echo "     Usu√°rio: postgres"
echo "     Senha: postgres123"
echo
print_info "üìä DAGS DISPON√çVEIS:"
echo "   ‚Ä¢ cryptocurrency_etl: Coleta dados das top 10 criptomoedas (30 min)"
echo "   ‚Ä¢ cryptocurrency_continuous_collection: Coleta cont√≠nua das top 5 (5 min)"
echo "   ‚Ä¢ cryptocurrency_reports: Gera relat√≥rios di√°rios"
echo
print_info "üõ† COMANDOS √öTEIS:"
echo "   ‚Ä¢ Ver logs: docker-compose logs [servi√ßo]"
echo "   ‚Ä¢ Parar tudo: docker-compose down"
echo "   ‚Ä¢ Reiniciar: docker-compose restart"
echo "   ‚Ä¢ Limpar tudo: docker-compose down -v"
echo
print_info "üìù PR√ìXIMOS PASSOS:"
echo "   1. Acesse http://localhost:8080 para ver a interface do Airflow"
echo "   2. Ative os DAGs desejados na interface web"
echo "   3. Monitore a coleta de dados nos logs"
echo
print_warning "‚ö† NOTA: Se algum servi√ßo n√£o estiver funcionando, aguarde alguns minutos"
print_warning "   para a inicializa√ß√£o completa ou verifique os logs."
echo
print_success "=============================================================================="
print_success "                         SETUP CONCLU√çDO!"
print_success "=============================================================================="